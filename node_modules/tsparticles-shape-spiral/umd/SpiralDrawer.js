(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SpiralDrawer = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    class SpiralDrawer {
        draw(context, particle, radius) {
            if (particle.spiralInnerRadius === undefined ||
                particle.spiralLineSpacing === undefined ||
                particle.spiralWidthFactor === undefined) {
                return;
            }
            const realWidth = (radius - particle.spiralInnerRadius) / particle.spiralLineSpacing, widthFactor = 10;
            for (let i = 0; i < realWidth * widthFactor; i++) {
                const angle = i / widthFactor, factor = particle.spiralInnerRadius + particle.spiralLineSpacing * angle, pos = {
                    x: factor * Math.cos(angle),
                    y: factor * Math.sin(angle),
                };
                context.lineTo(pos.x, pos.y);
            }
        }
        particleInit(container, particle) {
            const pixelRatio = container.retina.pixelRatio, shapeData = particle.shapeData;
            particle.spiralInnerRadius = (0, tsparticles_engine_1.getRangeValue)(shapeData.innerRadius ?? 1) * pixelRatio;
            particle.spiralLineSpacing = (0, tsparticles_engine_1.getRangeValue)(shapeData.lineSpacing ?? 1) * pixelRatio;
            particle.spiralWidthFactor = (0, tsparticles_engine_1.getRangeValue)(shapeData.widthFactor ?? 10);
        }
    }
    exports.SpiralDrawer = SpiralDrawer;
});
