(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HsvColorManager = exports.hsvaToRgba = exports.hsvToRgb = exports.hsvaToHsla = exports.hsvToHsl = exports.hslaToHsva = exports.hslToHsv = exports.getStyleFromHsv = exports.rgbaToHsva = exports.rgbToHsv = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    function rgbToHsv(rgb) {
        const rgbPercent = {
            r: rgb.r / 255,
            g: rgb.g / 255,
            b: rgb.b / 255,
        }, xMax = Math.max(rgbPercent.r, rgbPercent.g, rgbPercent.b), xMin = Math.min(rgbPercent.r, rgbPercent.g, rgbPercent.b), v = xMax, c = xMax - xMin;
        let h = 0;
        if (v === rgbPercent.r) {
            h = 60 * ((rgbPercent.g - rgbPercent.b) / c);
        }
        else if (v === rgbPercent.g) {
            h = 60 * (2 + (rgbPercent.b - rgbPercent.r) / c);
        }
        else if (v === rgbPercent.b) {
            h = 60 * (4 + (rgbPercent.r - rgbPercent.g) / c);
        }
        const s = !v ? 0 : c / v;
        return {
            h,
            s: s * 100,
            v: v * 100,
        };
    }
    exports.rgbToHsv = rgbToHsv;
    function rgbaToHsva(rgba) {
        return {
            a: rgba.a,
            ...rgbToHsv(rgba),
        };
    }
    exports.rgbaToHsva = rgbaToHsva;
    function getStyleFromHsv(color, opacity) {
        return (0, tsparticles_engine_1.getStyleFromHsl)(hsvToHsl(color), opacity);
    }
    exports.getStyleFromHsv = getStyleFromHsv;
    function hslToHsv(hsl) {
        const l = hsl.l / 100, sl = hsl.s / 100, v = l + sl * Math.min(l, 1 - l), sv = !v ? 0 : 2 * (1 - l / v);
        return {
            h: hsl.h,
            s: sv * 100,
            v: v * 100,
        };
    }
    exports.hslToHsv = hslToHsv;
    function hslaToHsva(hsla) {
        return {
            a: hsla.a,
            ...hslToHsv(hsla),
        };
    }
    exports.hslaToHsva = hslaToHsva;
    function hsvToHsl(hsv) {
        const v = hsv.v / 100, sv = hsv.s / 100, l = v * (1 - sv / 2), sl = l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l);
        return {
            h: hsv.h,
            l: l * 100,
            s: sl * 100,
        };
    }
    exports.hsvToHsl = hsvToHsl;
    function hsvaToHsla(hsva) {
        return {
            a: hsva.a,
            ...hsvToHsl(hsva),
        };
    }
    exports.hsvaToHsla = hsvaToHsla;
    function hsvToRgb(hsv) {
        const result = { b: 0, g: 0, r: 0 }, hsvPercent = {
            h: hsv.h / 60,
            s: hsv.s / 100,
            v: hsv.v / 100,
        }, c = hsvPercent.v * hsvPercent.s, x = c * (1 - Math.abs((hsvPercent.h % 2) - 1));
        let tempRgb;
        if (hsvPercent.h >= 0 && hsvPercent.h <= 1) {
            tempRgb = {
                r: c,
                g: x,
                b: 0,
            };
        }
        else if (hsvPercent.h > 1 && hsvPercent.h <= 2) {
            tempRgb = {
                r: x,
                g: c,
                b: 0,
            };
        }
        else if (hsvPercent.h > 2 && hsvPercent.h <= 3) {
            tempRgb = {
                r: 0,
                g: c,
                b: x,
            };
        }
        else if (hsvPercent.h > 3 && hsvPercent.h <= 4) {
            tempRgb = {
                r: 0,
                g: x,
                b: c,
            };
        }
        else if (hsvPercent.h > 4 && hsvPercent.h <= 5) {
            tempRgb = {
                r: x,
                g: 0,
                b: c,
            };
        }
        else if (hsvPercent.h > 5 && hsvPercent.h <= 6) {
            tempRgb = {
                r: c,
                g: 0,
                b: x,
            };
        }
        if (tempRgb) {
            const m = hsvPercent.v - c;
            result.r = Math.floor((tempRgb.r + m) * 255);
            result.g = Math.floor((tempRgb.g + m) * 255);
            result.b = Math.floor((tempRgb.b + m) * 255);
        }
        return result;
    }
    exports.hsvToRgb = hsvToRgb;
    function hsvaToRgba(hsva) {
        return {
            a: hsva.a,
            ...hsvToRgb(hsva),
        };
    }
    exports.hsvaToRgba = hsvaToRgba;
    class HsvColorManager {
        constructor() {
            this.key = "hsv";
            this.stringPrefix = "hsv";
        }
        handleColor(color) {
            const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;
            if (hsvColor.h !== undefined && hsvColor.v !== undefined) {
                return hsvToRgb(hsvColor);
            }
        }
        handleRangeColor(color) {
            const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;
            if (hsvColor.h !== undefined && hsvColor.v !== undefined) {
                return hsvToRgb({
                    h: (0, tsparticles_engine_1.getRangeValue)(hsvColor.h),
                    s: (0, tsparticles_engine_1.getRangeValue)(hsvColor.s),
                    v: (0, tsparticles_engine_1.getRangeValue)(hsvColor.v),
                });
            }
        }
        parseString(input) {
            if (!input.startsWith("hsv")) {
                return;
            }
            const regex = /hsva?\(\s*(\d+)Â°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.%]+)\s*)?\)/i, result = regex.exec(input);
            return result
                ? hsvaToRgba({
                    a: result.length > 4 ? (0, tsparticles_engine_1.parseAlpha)(result[5]) : 1,
                    h: parseInt(result[1], 10),
                    s: parseInt(result[2], 10),
                    v: parseInt(result[3], 10),
                })
                : undefined;
        }
    }
    exports.HsvColorManager = HsvColorManager;
});
