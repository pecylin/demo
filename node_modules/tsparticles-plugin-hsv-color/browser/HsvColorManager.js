import { getRangeValue, getStyleFromHsl, parseAlpha, } from "tsparticles-engine";
export function rgbToHsv(rgb) {
    const rgbPercent = {
        r: rgb.r / 255,
        g: rgb.g / 255,
        b: rgb.b / 255,
    }, xMax = Math.max(rgbPercent.r, rgbPercent.g, rgbPercent.b), xMin = Math.min(rgbPercent.r, rgbPercent.g, rgbPercent.b), v = xMax, c = xMax - xMin;
    let h = 0;
    if (v === rgbPercent.r) {
        h = 60 * ((rgbPercent.g - rgbPercent.b) / c);
    }
    else if (v === rgbPercent.g) {
        h = 60 * (2 + (rgbPercent.b - rgbPercent.r) / c);
    }
    else if (v === rgbPercent.b) {
        h = 60 * (4 + (rgbPercent.r - rgbPercent.g) / c);
    }
    const s = !v ? 0 : c / v;
    return {
        h,
        s: s * 100,
        v: v * 100,
    };
}
export function rgbaToHsva(rgba) {
    return {
        a: rgba.a,
        ...rgbToHsv(rgba),
    };
}
export function getStyleFromHsv(color, opacity) {
    return getStyleFromHsl(hsvToHsl(color), opacity);
}
export function hslToHsv(hsl) {
    const l = hsl.l / 100, sl = hsl.s / 100, v = l + sl * Math.min(l, 1 - l), sv = !v ? 0 : 2 * (1 - l / v);
    return {
        h: hsl.h,
        s: sv * 100,
        v: v * 100,
    };
}
export function hslaToHsva(hsla) {
    return {
        a: hsla.a,
        ...hslToHsv(hsla),
    };
}
export function hsvToHsl(hsv) {
    const v = hsv.v / 100, sv = hsv.s / 100, l = v * (1 - sv / 2), sl = l === 0 || l === 1 ? 0 : (v - l) / Math.min(l, 1 - l);
    return {
        h: hsv.h,
        l: l * 100,
        s: sl * 100,
    };
}
export function hsvaToHsla(hsva) {
    return {
        a: hsva.a,
        ...hsvToHsl(hsva),
    };
}
export function hsvToRgb(hsv) {
    const result = { b: 0, g: 0, r: 0 }, hsvPercent = {
        h: hsv.h / 60,
        s: hsv.s / 100,
        v: hsv.v / 100,
    }, c = hsvPercent.v * hsvPercent.s, x = c * (1 - Math.abs((hsvPercent.h % 2) - 1));
    let tempRgb;
    if (hsvPercent.h >= 0 && hsvPercent.h <= 1) {
        tempRgb = {
            r: c,
            g: x,
            b: 0,
        };
    }
    else if (hsvPercent.h > 1 && hsvPercent.h <= 2) {
        tempRgb = {
            r: x,
            g: c,
            b: 0,
        };
    }
    else if (hsvPercent.h > 2 && hsvPercent.h <= 3) {
        tempRgb = {
            r: 0,
            g: c,
            b: x,
        };
    }
    else if (hsvPercent.h > 3 && hsvPercent.h <= 4) {
        tempRgb = {
            r: 0,
            g: x,
            b: c,
        };
    }
    else if (hsvPercent.h > 4 && hsvPercent.h <= 5) {
        tempRgb = {
            r: x,
            g: 0,
            b: c,
        };
    }
    else if (hsvPercent.h > 5 && hsvPercent.h <= 6) {
        tempRgb = {
            r: c,
            g: 0,
            b: x,
        };
    }
    if (tempRgb) {
        const m = hsvPercent.v - c;
        result.r = Math.floor((tempRgb.r + m) * 255);
        result.g = Math.floor((tempRgb.g + m) * 255);
        result.b = Math.floor((tempRgb.b + m) * 255);
    }
    return result;
}
export function hsvaToRgba(hsva) {
    return {
        a: hsva.a,
        ...hsvToRgb(hsva),
    };
}
export class HsvColorManager {
    constructor() {
        this.key = "hsv";
        this.stringPrefix = "hsv";
    }
    handleColor(color) {
        const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;
        if (hsvColor.h !== undefined && hsvColor.v !== undefined) {
            return hsvToRgb(hsvColor);
        }
    }
    handleRangeColor(color) {
        const colorValue = color.value, hsvColor = colorValue.hsv ?? color.value;
        if (hsvColor.h !== undefined && hsvColor.v !== undefined) {
            return hsvToRgb({
                h: getRangeValue(hsvColor.h),
                s: getRangeValue(hsvColor.s),
                v: getRangeValue(hsvColor.v),
            });
        }
    }
    parseString(input) {
        if (!input.startsWith("hsv")) {
            return;
        }
        const regex = /hsva?\(\s*(\d+)Â°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.%]+)\s*)?\)/i, result = regex.exec(input);
        return result
            ? hsvaToRgba({
                a: result.length > 4 ? parseAlpha(result[5]) : 1,
                h: parseInt(result[1], 10),
                s: parseInt(result[2], 10),
                v: parseInt(result[3], 10),
            })
            : undefined;
    }
}
