"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoundedRectDrawer = void 0;
const tsparticles_engine_1 = require("tsparticles-engine");
const fixFactor = Math.sqrt(2), drawRoundedRect = (ctx, info, radius = {
    topRight: 4,
    bottomRight: 4,
    bottomLeft: 4,
    topLeft: 4,
}) => {
    const { x, y, width, height } = info, r = x + width, b = y + height;
    ctx.moveTo(x + radius.topLeft, y);
    ctx.lineTo(r - radius.topRight, y);
    ctx.quadraticCurveTo(r, y, r, y + radius.topRight);
    ctx.lineTo(r, y + height - radius.bottomRight);
    ctx.quadraticCurveTo(r, b, r - radius.bottomRight, b);
    ctx.lineTo(x + radius.bottomLeft, b);
    ctx.quadraticCurveTo(x, b, x, b - radius.bottomLeft);
    ctx.lineTo(x, y + radius.topLeft);
    ctx.quadraticCurveTo(x, y, x + radius.topLeft, y);
};
class RoundedRectDrawer {
    draw(context, particle, radius) {
        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2, borderRadius = particle.borderRadius ?? 5;
        if ("roundRect" in context) {
            context.roundRect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter, borderRadius);
        }
        else {
            drawRoundedRect(context, {
                x: -fixedRadius,
                y: -fixedRadius,
                height: fixedDiameter,
                width: fixedDiameter,
            }, {
                topLeft: borderRadius,
                topRight: borderRadius,
                bottomLeft: borderRadius,
                bottomRight: borderRadius,
            });
        }
    }
    particleInit(container, particle) {
        const shapeData = particle.shapeData;
        particle.borderRadius = (0, tsparticles_engine_1.getRangeValue)(shapeData?.radius ?? 5) * container.retina.pixelRatio;
    }
}
exports.RoundedRectDrawer = RoundedRectDrawer;
