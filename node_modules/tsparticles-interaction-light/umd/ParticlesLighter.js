(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tsparticles-engine", "./Utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParticlesLighter = void 0;
    const tsparticles_engine_1 = require("tsparticles-engine");
    const Utils_1 = require("./Utils");
    class ParticlesLighter extends tsparticles_engine_1.ParticlesInteractorBase {
        constructor(container) {
            super(container);
        }
        clear() {
        }
        init() {
        }
        async interact(particle) {
            const container = this.container, options = container.actualOptions, interactivity = container.interactivity;
            if (!options.interactivity.events.onHover.enable || interactivity.status !== "pointermove") {
                return;
            }
            const mousePos = interactivity.mouse.position;
            if (!mousePos) {
                return;
            }
            container.canvas.draw((ctx) => {
                (0, Utils_1.drawParticleShadow)(container, ctx, particle, mousePos);
            });
        }
        isEnabled(particle) {
            const container = this.container, interactivity = particle.interactivity ?? container.actualOptions.interactivity, mouse = container.interactivity.mouse, events = interactivity.events;
            if (!(events.onHover.enable && mouse.position)) {
                return false;
            }
            const res = (0, tsparticles_engine_1.isInArray)("light", events.onHover.mode);
            if (res && interactivity.modes.light) {
                const shadowOptions = interactivity.modes.light.shadow;
                particle.lightShadow = (0, tsparticles_engine_1.rangeColorToRgb)(shadowOptions.color);
            }
            return res;
        }
        reset() {
        }
    }
    exports.ParticlesLighter = ParticlesLighter;
});
