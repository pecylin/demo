import { Infection } from "./Options/Classes/Infection";
import { InfectionInstance } from "./InfectionInstance";
import { ParticlesInfecter } from "./ParticlesInfecter";
class InfectionPlugin {
    constructor() {
        this.id = "infection";
    }
    getPlugin(container) {
        return new InfectionInstance(container);
    }
    loadOptions(options, source) {
        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
            return;
        }
        let infectionOptions = options.infection;
        if (infectionOptions?.load === undefined) {
            options.infection = infectionOptions = new Infection();
        }
        infectionOptions.load(source?.infection);
    }
    needsPlugin(options) {
        return options?.infection?.enable ?? false;
    }
}
export async function loadInfectionPlugin(engine, refresh = true) {
    const plugin = new InfectionPlugin();
    await engine.addPlugin(plugin, refresh);
    await engine.addInteractor("particlesInfection", (container) => new ParticlesInfecter(container), refresh);
}
export * from "./Options/Interfaces/IInfection";
export * from "./Options/Interfaces/IInfectionStage";
