"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadInfectionPlugin = void 0;
const Infection_1 = require("./Options/Classes/Infection");
const InfectionInstance_1 = require("./InfectionInstance");
const ParticlesInfecter_1 = require("./ParticlesInfecter");
class InfectionPlugin {
    constructor() {
        this.id = "infection";
    }
    getPlugin(container) {
        return new InfectionInstance_1.InfectionInstance(container);
    }
    loadOptions(options, source) {
        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
            return;
        }
        let infectionOptions = options.infection;
        if (infectionOptions?.load === undefined) {
            options.infection = infectionOptions = new Infection_1.Infection();
        }
        infectionOptions.load(source?.infection);
    }
    needsPlugin(options) {
        return options?.infection?.enable ?? false;
    }
}
async function loadInfectionPlugin(engine, refresh = true) {
    const plugin = new InfectionPlugin();
    await engine.addPlugin(plugin, refresh);
    await engine.addInteractor("particlesInfection", (container) => new ParticlesInfecter_1.ParticlesInfecter(container), refresh);
}
exports.loadInfectionPlugin = loadInfectionPlugin;
__exportStar(require("./Options/Interfaces/IInfection"), exports);
__exportStar(require("./Options/Interfaces/IInfectionStage"), exports);
