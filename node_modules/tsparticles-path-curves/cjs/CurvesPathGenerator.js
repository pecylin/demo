"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurvesPathGenerator = void 0;
const tsparticles_engine_1 = require("tsparticles-engine");
const Curves_1 = require("./Curves");
class CurvesPathGenerator {
    constructor() {
        this.options = {
            rndFunc: null,
            period: 100,
            nbHarmonics: 2,
            attenHarmonics: 0.8,
            lowValue: -0.03,
            highValue: 0.03,
        };
    }
    generate(p) {
        if (!p.pathGen) {
            const options = this.options;
            p.pathGen = (0, Curves_1.CurvesPathGen)(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);
        }
        if (!p.curveVelocity) {
            p.curveVelocity = tsparticles_engine_1.Vector.origin;
            p.curveVelocity.length = (0, tsparticles_engine_1.getRandom)() * 0.6 + 0.8;
            p.curveVelocity.angle = (0, tsparticles_engine_1.getRandom)() * Math.PI * 2;
        }
        else {
            p.curveVelocity.length += 0.01;
            p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % (Math.PI * 2);
        }
        p.velocity.x = 0;
        p.velocity.y = 0;
        return p.curveVelocity;
    }
    init(container) {
        const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;
        if ((0, tsparticles_engine_1.isFunction)(sourceOptions.rndFunc)) {
            options.rndFunc = sourceOptions.rndFunc;
        }
        else if ((0, tsparticles_engine_1.isString)(sourceOptions.rndFunc)) {
            options.rndFunc =
                window[sourceOptions.rndFunc] || this.options.rndFunc;
        }
        options.period = sourceOptions.period ?? options.period;
        options.nbHarmonics = sourceOptions.nbHarmonics ?? options.nbHarmonics;
        options.attenHarmonics = sourceOptions.attenHarmonics ?? options.attenHarmonics;
        options.lowValue = sourceOptions.lowValue ?? options.lowValue;
        options.highValue = sourceOptions.highValue ?? options.highValue;
    }
    reset(particle) {
        delete particle.pathGen;
        delete particle.curveVelocity;
    }
    update() {
    }
}
exports.CurvesPathGenerator = CurvesPathGenerator;
