(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateGradient = void 0;
    function updateColorOpacity(delta, value) {
        if (!value.enable) {
            return;
        }
        const decay = value.decay ?? 1;
        switch (value.status) {
            case "increasing":
                if (value.value >= value.max) {
                    value.status = "decreasing";
                }
                else {
                    value.value += (value.velocity ?? 0) * delta.factor;
                }
                break;
            case "decreasing":
                if (value.value <= value.min) {
                    value.status = "increasing";
                }
                else {
                    value.value -= (value.velocity ?? 0) * delta.factor;
                }
                break;
        }
        if (value.velocity && decay !== 1) {
            value.velocity *= decay;
        }
    }
    function updateColorValue(delta, colorValue, max, decrease) {
        if (!colorValue || !colorValue.enable) {
            return;
        }
        if (!colorValue.time) {
            colorValue.time = 0;
        }
        if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {
            colorValue.time += delta.value;
        }
        if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {
            return;
        }
        const velocity = (colorValue.velocity ?? 0) * delta.factor, decay = colorValue.decay ?? 1;
        if (!decrease || colorValue.status === "increasing") {
            colorValue.value += velocity;
            if (decrease && colorValue.value > max) {
                colorValue.status = "decreasing";
                colorValue.value -= colorValue.value % max;
            }
        }
        else {
            colorValue.value -= velocity;
            if (colorValue.value < 0) {
                colorValue.status = "increasing";
                colorValue.value += colorValue.value;
            }
        }
        if (colorValue.value > max) {
            colorValue.value %= max;
        }
        if (colorValue.velocity && decay !== 1) {
            colorValue.velocity *= decay;
        }
    }
    function updateAngle(delta, angle) {
        const speed = (angle.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = angle.decay ?? 1;
        if (!angle.enable) {
            return;
        }
        switch (angle.status) {
            case "increasing":
                angle.value += speed;
                if (angle.value > max) {
                    angle.value -= max;
                }
                break;
            case "decreasing":
            default:
                angle.value -= speed;
                if (angle.value < 0) {
                    angle.value += max;
                }
                break;
        }
        if (angle.velocity && decay !== 1) {
            angle.velocity *= decay;
        }
    }
    function updateGradient(particle, delta) {
        const { gradient } = particle;
        if (!gradient) {
            return;
        }
        updateAngle(delta, gradient.angle);
        for (const color of gradient.colors) {
            if (particle.color?.h !== undefined) {
                updateColorValue(delta, color.value.h, 360, false);
            }
            if (particle.color?.s !== undefined) {
                updateColorValue(delta, color.value.s, 100, true);
            }
            if (particle.color?.l !== undefined) {
                updateColorValue(delta, color.value.l, 100, true);
            }
            if (color.opacity) {
                updateColorOpacity(delta, color.opacity);
            }
        }
    }
    exports.updateGradient = updateGradient;
});
