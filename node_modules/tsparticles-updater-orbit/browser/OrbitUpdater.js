import { getRangeValue, rangeColorToHsl, } from "tsparticles-engine";
import { Orbit } from "./Options/Classes/Orbit";
import { drawEllipse } from "./Utils";
export class OrbitUpdater {
    constructor(container) {
        this.container = container;
    }
    afterDraw(particle) {
        const orbitOptions = particle.options.orbit;
        if (orbitOptions?.enable) {
            this.drawOrbit(particle, "front");
        }
    }
    beforeDraw(particle) {
        const orbitOptions = particle.options.orbit;
        if (orbitOptions?.enable) {
            this.drawOrbit(particle, "back");
        }
    }
    drawOrbit(particle, type) {
        const container = this.container;
        let start, end;
        switch (type) {
            case "back":
                start = Math.PI / 2;
                end = (Math.PI * 3) / 2;
                break;
            case "front":
                start = (Math.PI * 3) / 2;
                end = Math.PI / 2;
                break;
            default:
                start = 0;
                end = 2 * Math.PI;
        }
        container.canvas.draw((ctx) => {
            drawEllipse(ctx, particle, particle.orbitColor ?? particle.getFillColor(), particle.retina.orbitRadius ?? container.retina.orbitRadius ?? particle.getRadius(), particle.orbitOpacity ?? 1, particle.orbitWidth ?? 1, (particle.orbitRotation ?? 0) * container.retina.pixelRatio, start, end);
        });
    }
    init(particle) {
        const container = this.container, particlesOptions = particle.options, orbitOptions = particlesOptions.orbit;
        if (!orbitOptions?.enable) {
            return;
        }
        particle.orbitRotation = getRangeValue(orbitOptions.rotation.value);
        particle.orbitColor = rangeColorToHsl(orbitOptions.color);
        particle.retina.orbitRadius =
            orbitOptions.radius !== undefined
                ? getRangeValue(orbitOptions.radius) * container.retina.pixelRatio
                : undefined;
        container.retina.orbitRadius = particle.retina.orbitRadius;
        particle.orbitAnimationSpeed = orbitOptions.animation.enable ? getRangeValue(orbitOptions.animation.speed) : 0;
        particle.orbitWidth = getRangeValue(orbitOptions.width);
        particle.orbitOpacity = getRangeValue(orbitOptions.opacity);
    }
    isEnabled(particle) {
        const orbitAnimations = particle.options.orbit?.animation;
        return !particle.destroyed && !particle.spawning && !!orbitAnimations?.enable;
    }
    loadOptions(options, ...sources) {
        if (!options.orbit) {
            options.orbit = new Orbit();
        }
        for (const source of sources) {
            options.orbit.load(source?.orbit);
        }
    }
    update(particle, delta) {
        if (!this.isEnabled(particle)) {
            return;
        }
        if (particle.orbitRotation === undefined) {
            particle.orbitRotation = 0;
        }
        particle.orbitRotation += (particle.orbitAnimationSpeed ?? 0 / (Math.PI * 2)) * delta.factor;
    }
}
